---
name: "AzOps - Pull"

on:
  #
  # Workflow Dispatch
  # This is to invoke the action from the GitHub UI
  # testing

  workflow_dispatch:

  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  #
  # Repository Dispatch
  # Invoke this action based on event / webhook, this
  # could be from an activity logs when a specific condition
  # is met and triggered
  #

  #repository_dispatch:
  #  types:
  #    - "Enterprise-Scale Deployment"
  #    - "Enterprise-Scale Event"

  #
  # Schedule
  # This is an optional trigger to pull the latest Azure
  # hierarchy into the Git repository in a recurring
  # manner.
  #
  # Default: Every 6 hours
  #

  #schedule:
  #  - cron: "0 */6 * * *"

  #
  # Workflow Run
  # Triggers this workflow upon the completion of
  # the Push action.
  #

  #workflow_run:
  #  workflows: ["AzOps - Push"]
  #  branches: [main]
  #  types:
  #    - completed

permissions:
      id-token: write
      contents: write
      pull-requests: write
      
env:
  #
  # Credentials
  #

  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  GITHUB_TOKEN: ${{ secrets.ghp }}

  #
  # Folder Name
  # By default we generate the hierachy within the
  # 'azops' folder within the root of the repository.
  # If this property is modified, the config value within
  # the settings.json file - Core.State will also need
  # to be changed.
  #
  # Default: root
  #

  folder: "root"

  #
  # Branch Name
  # As part of the Pull workflow we check a temporary branch
  # this branch was previously know as system, this value can
  # be changed if this name is already reserved for other systems
  # within the repository.
  #
  # Default: automated
  #

  branch: "automated"

  #
  # Commit Message
  # During the Pull workflow, the changes are commited to the
  # temporary branch, the message which is applied within the
  # Git history can be changed as needed.
  #
  # Default: Automated commit
  #

  commit_message: "Automated commit"

  #
  # Pull Request
  # The generated Pull Request for the Pull workflow can be
  # modified to help indicate when changes we're merged in the
  # Git history.
  #
  # Default: Automated state
  #

  pull_request: "Automated State"

jobs:
  pull:
    #
    # Pull
    #

    name: "Pull"
    runs-on: ubuntu-20.04
    environment: poc
    
    #
    # Only run Pull after successful Push or on manually triggered/scheduled events
    #

    #if: ${{ github.event.workflow_run.conclusion == 'success' ||
    #  contains(fromJson('["schedule", "workflow_dispatch", "repository_dispatch"]'), github.event_name) }}

    steps:
      #
      # Checkout
      # Checks-out the repository
      #

      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      #
      # Configure
      # Set global options
      #

      - name: "Configure"
        shell: bash
        run: |
          git config user.name github-actions
          git config user.email '18469557+jasonbrisbin@users.noreply.github.com'

      #
      # Checkout
      # Switch branches
      #

      - name: "Checkout"
        shell: bash
        run: |
          git checkout -b ${{ env.branch }}

      #
      # Dependencies
      # Install required runtime modules
      #

      - name: "Dependencies"
        shell: pwsh
        run: |
          #Install-Module -Name "AzOps" -Force
          . .github/scripts/install.ps1
          Install-SourceModule -Repository 'vancopayments/AzOps' -Branch "main"
          $module = Get-Module -Name AzOps -ListAvailable
          $data = Import-PowerShellDataFile -Path $module.Path
          foreach ($dependency in $data.RequiredModules) {
          Install-Module -Name $dependency.ModuleName -RequiredVersion $dependency.RequiredVersion -Force
          }
          

      - name: "Install CLI-beta (for OIDC federated credentials support)"
        run: |
           cd ../..
           CWD="$(pwd)"
           python3 -m venv oidc-venv
           . oidc-venv/bin/activate
           echo "activated environment" 
           python3 -m pip install --upgrade pip
           echo "started installing cli beta" 
           pip install -q --extra-index-url https://azcliprod.blob.core.windows.net/beta/simple/ azure-cli
           echo "installed cli beta"    
           echo "$CWD/oidc-venv/bin" >> $GITHUB_PATH   
      #
      # Connect
      # Authenticate Azure context
      #

      - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
        uses: azure/login@v1.4.0
        with:
          client-id: ${{ env.ARM_CLIENT_ID}}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }} 
          enable-AzPSSession: true
      #
      # Initialize
      # Generate new state data
      #

      - name: "Initialize"
        shell: pwsh
        run: |
          Import-PSFConfig -Path settings.json -Schema MetaJson -EnableException
          if ($env:ACTION -eq "Enterprise-Scale Deployment") {
            Set-PSFConfig -FullName AzOps.Core.SkipResource -Value $false
          }
          Invoke-AzOpsPull -Rebuild
          Get-Job | Remove-Job -Force
          "Directory List"
          get-childitem "$($env:GITHUB_WORKSPACE)/root" -recurse
        env:
          ACTION: ${{ github.event.action }}

      #
      # Status
      # Check for data changes
      #

      - name: "Status"
        id: status
        shell: bash
        run: |
          echo "Present Working Directory"
          echo $PWD

          echo "Directory Listing"
          ls -R
          
          STATUS=$(git status --short)
          echo "Status = $STATUS"
          if [ -z "$STATUS" ]
          then
            echo "::set-output name=state::stop"
          else
            echo "::set-output name=state::continue"
          fi

      #
      # Add
      # Add file content to index
      #

      - name: "Add"
        if: steps.status.outputs.state == 'continue'
        run: |
          git add "./${{ env.folder }}"
        shell: bash

      #
      # Commit
      # Record changes to the repository
      #

      - name: "Commit"
        if: steps.status.outputs.state == 'continue'
        shell: bash
        run: |
          git commit -m "${{ env.commit_message }}"

      #
      # Push
      # Update remote refs along with associated objects
      #

      - name: "Push"
        if: steps.status.outputs.state == 'continue'
        shell: bash
        run: |
          git push origin ${{ env.branch }} -f

      #
      # Merge
      # Automatically merge the head branch into base
      #

      - name: "Merge"
        if: steps.status.outputs.state == 'continue'
        shell: bash
        run: |
          gh pr create --title "${{ env.pull_request }}" --body "-" --base ${{ github.ref }} --head ${{ env.branch }}
          #gh pr merge "${{ env.branch }}" --squash --delete-branch